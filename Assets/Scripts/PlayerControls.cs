//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""MovementActions"",
            ""id"": ""caa0fab4-aac9-42d6-9ef4-446ef3d93650"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Value"",
                    ""id"": ""be7b444a-03a5-4937-a68f-c52895d21bbc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""99721467-1d84-4f2a-b3ac-68dbd77a379c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""58cb9c43-64ff-4cbd-bb4a-54f42fcb1452"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3d910c65-ffab-431f-9547-69ab6b59d3ce"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""58bd18b9-e992-4dc7-8525-b8a2f5446d54"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7b3fd94b-7a32-4cca-9bf8-80009a9a9389"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""20ee0dd0-c12f-4e44-9833-d34bb84b23bc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraActions"",
            ""id"": ""d7f2301b-3f61-4433-8488-23aec9df5f83"",
            ""actions"": [
                {
                    ""name"": ""MouseX"",
                    ""type"": ""Value"",
                    ""id"": ""aa362091-ee5d-4686-b6d8-98b7da61497b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""Value"",
                    ""id"": ""f95f18b3-3576-41a0-9314-5c03cc912df3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""da079863-cda4-436b-a184-86cd87e77fa8"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""441e43a1-3de1-4a91-8244-0fdf9266cb58"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e31fdc64-bc9a-42b6-8caf-cd881568fd2a"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d46c5e5-dfd1-43c7-9c01-17cdd2771232"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ShootingActions"",
            ""id"": ""ec359e49-2b29-45c8-bbb5-95c19f98aa5f"",
            ""actions"": [
                {
                    ""name"": ""ShootButton"",
                    ""type"": ""Button"",
                    ""id"": ""89397bf1-a55a-4c49-8c63-256205934e44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickUpWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""35019ef4-1d7a-435b-a564-90c7689f960a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""1f5d5007-65f0-4447-9107-22627c406a12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f2b69cb-6e09-4272-b8d4-442b403f613c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67febc18-edb9-4ea0-8a1e-b3fdf4e7582e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85294347-c1ec-48e0-b4de-9c95eac6be01"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUpWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f206d6e9-7f48-458c-9700-00ddeb8c012e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUpWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3e5bf4e-daab-4ece-b9a5-98f64ca5258f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6df00dd3-e8d8-4184-9476-cc8b41b302af"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementActions
        m_MovementActions = asset.FindActionMap("MovementActions", throwIfNotFound: true);
        m_MovementActions_Forward = m_MovementActions.FindAction("Forward", throwIfNotFound: true);
        // CameraActions
        m_CameraActions = asset.FindActionMap("CameraActions", throwIfNotFound: true);
        m_CameraActions_MouseX = m_CameraActions.FindAction("MouseX", throwIfNotFound: true);
        m_CameraActions_MouseY = m_CameraActions.FindAction("MouseY", throwIfNotFound: true);
        // ShootingActions
        m_ShootingActions = asset.FindActionMap("ShootingActions", throwIfNotFound: true);
        m_ShootingActions_ShootButton = m_ShootingActions.FindAction("ShootButton", throwIfNotFound: true);
        m_ShootingActions_PickUpWeapon = m_ShootingActions.FindAction("PickUpWeapon", throwIfNotFound: true);
        m_ShootingActions_DropWeapon = m_ShootingActions.FindAction("DropWeapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementActions
    private readonly InputActionMap m_MovementActions;
    private IMovementActionsActions m_MovementActionsActionsCallbackInterface;
    private readonly InputAction m_MovementActions_Forward;
    public struct MovementActionsActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_MovementActions_Forward;
        public InputActionMap Get() { return m_Wrapper.m_MovementActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActionsActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActionsActions instance)
        {
            if (m_Wrapper.m_MovementActionsActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_MovementActionsActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_MovementActionsActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_MovementActionsActionsCallbackInterface.OnForward;
            }
            m_Wrapper.m_MovementActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
            }
        }
    }
    public MovementActionsActions @MovementActions => new MovementActionsActions(this);

    // CameraActions
    private readonly InputActionMap m_CameraActions;
    private ICameraActionsActions m_CameraActionsActionsCallbackInterface;
    private readonly InputAction m_CameraActions_MouseX;
    private readonly InputAction m_CameraActions_MouseY;
    public struct CameraActionsActions
    {
        private @PlayerControls m_Wrapper;
        public CameraActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseX => m_Wrapper.m_CameraActions_MouseX;
        public InputAction @MouseY => m_Wrapper.m_CameraActions_MouseY;
        public InputActionMap Get() { return m_Wrapper.m_CameraActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActionsActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActionsActions instance)
        {
            if (m_Wrapper.m_CameraActionsActionsCallbackInterface != null)
            {
                @MouseX.started -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnMouseX;
                @MouseX.performed -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnMouseX;
                @MouseX.canceled -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnMouseX;
                @MouseY.started -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnMouseY;
                @MouseY.performed -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnMouseY;
                @MouseY.canceled -= m_Wrapper.m_CameraActionsActionsCallbackInterface.OnMouseY;
            }
            m_Wrapper.m_CameraActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
            }
        }
    }
    public CameraActionsActions @CameraActions => new CameraActionsActions(this);

    // ShootingActions
    private readonly InputActionMap m_ShootingActions;
    private IShootingActionsActions m_ShootingActionsActionsCallbackInterface;
    private readonly InputAction m_ShootingActions_ShootButton;
    private readonly InputAction m_ShootingActions_PickUpWeapon;
    private readonly InputAction m_ShootingActions_DropWeapon;
    public struct ShootingActionsActions
    {
        private @PlayerControls m_Wrapper;
        public ShootingActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShootButton => m_Wrapper.m_ShootingActions_ShootButton;
        public InputAction @PickUpWeapon => m_Wrapper.m_ShootingActions_PickUpWeapon;
        public InputAction @DropWeapon => m_Wrapper.m_ShootingActions_DropWeapon;
        public InputActionMap Get() { return m_Wrapper.m_ShootingActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootingActionsActions set) { return set.Get(); }
        public void SetCallbacks(IShootingActionsActions instance)
        {
            if (m_Wrapper.m_ShootingActionsActionsCallbackInterface != null)
            {
                @ShootButton.started -= m_Wrapper.m_ShootingActionsActionsCallbackInterface.OnShootButton;
                @ShootButton.performed -= m_Wrapper.m_ShootingActionsActionsCallbackInterface.OnShootButton;
                @ShootButton.canceled -= m_Wrapper.m_ShootingActionsActionsCallbackInterface.OnShootButton;
                @PickUpWeapon.started -= m_Wrapper.m_ShootingActionsActionsCallbackInterface.OnPickUpWeapon;
                @PickUpWeapon.performed -= m_Wrapper.m_ShootingActionsActionsCallbackInterface.OnPickUpWeapon;
                @PickUpWeapon.canceled -= m_Wrapper.m_ShootingActionsActionsCallbackInterface.OnPickUpWeapon;
                @DropWeapon.started -= m_Wrapper.m_ShootingActionsActionsCallbackInterface.OnDropWeapon;
                @DropWeapon.performed -= m_Wrapper.m_ShootingActionsActionsCallbackInterface.OnDropWeapon;
                @DropWeapon.canceled -= m_Wrapper.m_ShootingActionsActionsCallbackInterface.OnDropWeapon;
            }
            m_Wrapper.m_ShootingActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ShootButton.started += instance.OnShootButton;
                @ShootButton.performed += instance.OnShootButton;
                @ShootButton.canceled += instance.OnShootButton;
                @PickUpWeapon.started += instance.OnPickUpWeapon;
                @PickUpWeapon.performed += instance.OnPickUpWeapon;
                @PickUpWeapon.canceled += instance.OnPickUpWeapon;
                @DropWeapon.started += instance.OnDropWeapon;
                @DropWeapon.performed += instance.OnDropWeapon;
                @DropWeapon.canceled += instance.OnDropWeapon;
            }
        }
    }
    public ShootingActionsActions @ShootingActions => new ShootingActionsActions(this);
    public interface IMovementActionsActions
    {
        void OnForward(InputAction.CallbackContext context);
    }
    public interface ICameraActionsActions
    {
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
    public interface IShootingActionsActions
    {
        void OnShootButton(InputAction.CallbackContext context);
        void OnPickUpWeapon(InputAction.CallbackContext context);
        void OnDropWeapon(InputAction.CallbackContext context);
    }
}
